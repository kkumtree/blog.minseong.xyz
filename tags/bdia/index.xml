<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BDIA on kkumtree</title>
    <link>https://blog.minseong.xyz/tags/bdia/</link>
    <description>Recent content in BDIA on kkumtree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 04 Jul 2023 09:57:14 +0900</lastBuildDate><atom:link href="https://blog.minseong.xyz/tags/bdia/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows에서 여러 Github 토큰 관리</title>
      <link>https://blog.minseong.xyz/post/how-to-manage-github-tokens-in-local-windows/</link>
      <pubDate>Tue, 04 Jul 2023 09:57:14 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/how-to-manage-github-tokens-in-local-windows/</guid>
      <description>평소에는 Git관리를 terminal을 통해서 하고,
여러 SSH키를 통해 작업을 하기에
.ssh/config를 통해 키 기반으로 관리하고 있었다.
어쩌다보니, 토큰 기반으로 그것도 윈도우에서 관리를 해보게 되어서 둘 다 생소한 접근이라 새로운 셋업을 적용해보기로 했다.
VSCode 기반으로 세팅하기에, 그대로 따라온다면 별 문제 없이 잘 적용될 것이다.
cf. classic token이라 할지라도, 큰 이슈는 없을 것으로 생각된다.
Git config의 적용범위 git config &amp;lt;parameter&amp;gt;를 통해, 설정 값을 구성할 수 있다. system &amp;gt; global &amp;gt; local 순으로 옵션이 override된다.</description>
    </item>
    
    <item>
      <title>Linux Runlevel - 런레벨/부트레벨</title>
      <link>https://blog.minseong.xyz/post/runlevel-in-linux/</link>
      <pubDate>Thu, 22 Jun 2023 16:07:05 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/runlevel-in-linux/</guid>
      <description>CPU를 1600X에서 5700X로 업그레이드를 진행하기에 앞서,
RunLevel(런레벨/부트레벨)에 대해 한번 메모하고자 함.
Runlevel 7가지 레벨이 존재
man runlevel 참고 Level 5을 제외하고는, cli 환경에서만 구동
Linux Standard Base 기준
ls -l /lib/systemd/system/runlevel?.target 명령어로 확인 가능 RunLevel EN 설명 비고 0 Power Off 시스템 종료(중단/Halt) 1 Rescue 시스템 복구 단일 사용자 모드 2 Multi-User 다중 사용자(텍스트 모드, 네트워크 서비스 X) 사용 X (사용자 정의 가능) 3 Multi-User 다중 사용자(텍스트 모드) 4 Multi-User 상동 사용 X (사용자 정의 가능) 5 Graphical 다중 사용자 모드 (그래픽 모드) X-window 기반 6 Reboot 시스템 리부팅 운영체제(Ubuntu 22.</description>
    </item>
    
    <item>
      <title>Vagrant 설치 및 Provider 지정</title>
      <link>https://blog.minseong.xyz/post/vagrant-init-setup-with-docker/</link>
      <pubDate>Mon, 19 Jun 2023 11:12:47 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/vagrant-init-setup-with-docker/</guid>
      <description>Ubuntu 23.04 (Host OS)에서 간단하게 Vagrant 사용을 해보고, VBox가 아닌 Docker를 Provider로 지정하여 사용해본다.
WSL2 환경에서는 Vagrant가 의도한대로 작동하지 않으므로 유의: 별도의 설정 필요 Hashicorp Docs Vagrant 설치 Ubuntu 22.04 LTS 및 23.10 기준, APT repo를 통한 설치 지원 sudo apt-get install vagrant VBox 설치(사용 시) CPU 가상화 기술 활성화 필요(BIOS단, AMD의 경우는 SVM, Intel의 경우는 VT-x) virtualbox-ext-pack(선택): USB 2.0/3.0 지원 등의 확장 기능을 사용하려면 설치 개인용도의 제한적 라이선스(동의를 위한 대화창 확인) 확장기능을 쓸 필요가 없기 때문에 설치하지 아니함 sudo apt-get install virtualbox # sudo apt-get install virtualbox-ext-pack Docker 설치(사용 시) Ubuntu 기준, 아래 3가지 설치 방법이 있으므로, 친숙한 모드로 진행 sudo snap install docker # 최신버전 sudo apt-get install docker.</description>
    </item>
    
  </channel>
</rss>
