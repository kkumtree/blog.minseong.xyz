<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on kkumtree</title>
    <link>https://blog.minseong.xyz/tags/kubernetes/</link>
    <description>Recent content in kubernetes on kkumtree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sat, 26 Oct 2024 01:35:59 +0900</lastBuildDate><atom:link href="https://blog.minseong.xyz/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes Service(5): Cillium Quick-start w/Hubble UI</title>
      <link>https://blog.minseong.xyz/post/kans-8w-cilium-trial/</link>
      <pubDate>Sat, 26 Oct 2024 01:35:59 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-8w-cilium-trial/</guid>
      <description>그럼 매번 실패만 했던 Cilium 배포를 한번 해볼까요?
CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)를 통해 학습한 내용을 정리합니다.
1. CSP VM 골라보기 이렇게 쓴 이유는 결국 네트워크를 잘 알아야하는데,
작년에 할 때는 그런거 생각도 안하고 그냥 올려보려 했으니 당연히 안 돌아가겠죠?
trying2adult/What Is XDP And How Do You Use It In Linux 그냥 곰곰히 오리duckduckgo랑 투닥거리다보니, 비록 연식이 되긴 했지만
클릭을 안하고는 못배길 위의 블로그 제목이 눈에 띄였습니다.</description>
    </item>
    
    <item>
      <title>Why eBPF?</title>
      <link>https://blog.minseong.xyz/post/kans-8w-why-ebpf/</link>
      <pubDate>Mon, 21 Oct 2024 19:47:33 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-8w-why-ebpf/</guid>
      <description>고쳐야할 부분이 너무 많아서 나중에 해당 부분만 글을 작성할 예정입니다.
어느덧 이번 스터디도 대망의 Cilium을 다루기 시작합니다.
Cilium에 이렇게도 (저를 포함한) 모?두가 열광하는지 알아보기 전에
근간이 되는 eBPF를 먼저 가볍게 알아보고 가려합니다.
이 때는 설마 했지만, 역시나 스불재 엔딩이었다
CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)를 통해 학습한 내용을 정리합니다.
1. Linux Network Stack 스터디 1주차의 Jenkins 컨테이너에서 Host의 Docker 데몬 사용하기에서 가볍게 맛을 보고 도망치기 바빴지만, 여튼 아래의 사항은 스쳐지나갔습니다.</description>
    </item>
    
    <item>
      <title>Kubernetes Service(4): envoy config</title>
      <link>https://blog.minseong.xyz/post/kans-7w-envoy-config/</link>
      <pubDate>Sat, 19 Oct 2024 16:59:16 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-7w-envoy-config/</guid>
      <description>정적/동적 설정을 알아봅니다.
traefik을 맛볼때는, 호되게 데인 부분인데 envoy는 상대적으로 명료했습니다.
CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)를 통해 학습한 내용을 정리합니다.
1. Static Configuration 아래와 같이 구성됩니다.
static_resources listeners clusters (a) static_resources envoy의 시작과 함께, 정적으로 설정되는 모든 리소스를 포함한다고 합니다.
실제로 envoy-demo.yaml 파일을 열어보면 최상단에 static_resources이 선언되어 있습니다.
static_resources: listeners: (b) listeners envoy-demo.yaml 파일 기준,
socket_address: 리스너는 포트 10000에서 수신하도록 설정되어 있습니다. route_config: 모든 경로에 대해 service_envoyproxy_io 클러스터로 라우팅합니다.</description>
    </item>
    
    <item>
      <title>Kubernetes Service(4): envoy overview</title>
      <link>https://blog.minseong.xyz/post/kans-7w-envoy-helloworld/</link>
      <pubDate>Tue, 15 Oct 2024 10:16:38 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-7w-envoy-helloworld/</guid>
      <description>따로 슥 찾아보니, envoy는 Micro Service Architecture 등 구현된 단위 기능간의 통신을 위한 L7 Proxy 라고 합니다.
Docker Compose 정도나 일반 서비스에서는 굳이 필요하지는 않을 것 같지만, Service Mesh 환경에서는 알아두면 좋을 것 같아 훝어봅니다.
CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)를 통해 학습한 내용을 정리합니다.
1. Envoy Installation Docs: Installing Envoy wget -O- https://apt.envoyproxy.io/signing.key | sudo gpg --dearmor -o /etc/apt/keyrings/envoy-keyring.gpg echo &amp;#34;deb [signed-by=/etc/apt/keyrings/envoy-keyring.gpg] https://apt.envoyproxy.io jammy main&amp;#34; | sudo tee /etc/apt/sources.</description>
    </item>
    
    <item>
      <title>Kubernetes Service(3): Ingress(ingress-nginx) w/k3s</title>
      <link>https://blog.minseong.xyz/post/kans-6w-k3s-ingress/</link>
      <pubDate>Thu, 10 Oct 2024 22:12:57 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-6w-k3s-ingress/</guid>
      <description>지난 포스팅, Kubernetes Service(2): LoadBalancer(MetalLB)에 이어 Ingress Type을 가볍게 살펴보고, Ingress-Nginx를 가볍게 붙여보겠습니다.
CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)를 통해 학습한 내용을 정리합니다.
1. Ingress Type 이제, 신규 기능(New feature)은 Gateway API에 추가된다고 합니다.
우선, Kubernetes가 헷갈리는 것 중 하나가,
Ingress Type 과 LoadBalancer Type의 명확한 차이가 뭘까...?
라는 점이라고 봅니다. 물론, 그거 외에도 k8s에는 알쏭달쏭한 것들이 아-주 많지만요.
친절한 Docs에 따르면,
클러스터 외부로 클러스터 내부 서비스에 대한 HTTP 및 HTTPS 라우팅을 노출하는 것이라고 합니다.</description>
    </item>
    
    <item>
      <title>Kubernetes Service(2): LoadBalancer(MetalLB)</title>
      <link>https://blog.minseong.xyz/post/kans-5w-metallb-loadbalancer/</link>
      <pubDate>Wed, 02 Oct 2024 12:54:17 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-5w-metallb-loadbalancer/</guid>
      <description>지난 포스팅, Kubernetes Service(1): ClusterIP/NodePort에 이어 LoadBalancer Type을 가볍게 살펴보고, MetalLB를 가볍게 붙여보겠습니다.
CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)를 통해 학습한 내용을 정리합니다.
1. LoadBalancer Type Service(1)에서 언급된 부분은 거두절미하고, 추가로 적을 수 있는 부분이 있다면, 아래 한 줄이 있습니다.
You can define a LoadBalancer Service by disabling the load balancer NodePort allocation.
글자 그대로 LB의 NodePort 할당을 비활성하여, LoadBalancer Service를 정의할 수 있습니다.
Disabling load balancer NodePort allocation 문서를 살펴보니,</description>
    </item>
    
    <item>
      <title>iptables monitoring with Grafana (Not Completed)</title>
      <link>https://blog.minseong.xyz/post/kans-4w-iptables-grafana/</link>
      <pubDate>Sun, 29 Sep 2024 13:35:13 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-4w-iptables-grafana/</guid>
      <description>iptables를 수집하여 Grafana로 표현하는 방법을 알아봅니다.
CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)를 통해 학습한 내용을 정리합니다.
0. 환경 구성 (kind) 작성시간 이슈로 featureGates, ConfigPatches, networking 설정 설명은 스킵&amp;hellip;합니다.
a. 1 Master, 3 Slave 환경 구성 cat &amp;lt;&amp;lt;EOT&amp;gt; kind-svc-1w.yaml kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 featureGates: &amp;#34;InPlacePodVerticalScaling&amp;#34;: true &amp;#34;MultiCIDRServiceAllocator&amp;#34;: true nodes: - role: control-plane labels: mynode: control-plane topology.kubernetes.io/zone: ap-northeast-2a extraPortMappings: - containerPort: 30000 hostPort: 30000 - containerPort: 30001 hostPort: 30001 - containerPort: 30002 hostPort: 30002 kubeadmConfigPatches: - | kind: ClusterConfiguration apiServer: extraArgs: runtime-config: api/all=true controllerManager: extraArgs: bind-address: 0.</description>
    </item>
    
    <item>
      <title>Kubernetes Service(1): ClusterIP/NodePort</title>
      <link>https://blog.minseong.xyz/post/kans-4w-clusterip-nodeport/</link>
      <pubDate>Fri, 27 Sep 2024 21:28:17 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-4w-clusterip-nodeport/</guid>
      <description>Kubernetes의 (컨셉, 혹은 콘셉트라 불리는) Concepts 중에서 Service의 주제를 다뤄봅니다.
CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)를 통해 학습한 내용을 정리합니다.
Service Docs에 명료하게 적혀있긴 하지만,
단위 기능으로 잘게 쪼갠 Pod는 결국 개별적인 IP를 갖게되는데, Blue/Green 이미지 업데이트를 비롯해서 같은 기능을 하는 새로운 Pod의 IP를 다른 Pod가 IP주소 그대로 접근하기 어려워 중간에 둔 것으로 이해를 해보았습니다.
지금 레벨에서는 가정용 공유기에서 동적IP 환경에 대응하기 위해, DDNS를 사용하는 것과, MAC ADDR 기준으로 Static IP(DHCP모드시 활용)를 예약하는 것을 섞은 그 어딘가로 납득하고 계속 써보도록 하겠습니다.</description>
    </item>
    
    <item>
      <title>Calico Installation in Operator Mode</title>
      <link>https://blog.minseong.xyz/post/kans-3w-calico-operator/</link>
      <pubDate>Wed, 18 Sep 2024 20:52:16 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-3w-calico-operator/</guid>
      <description>CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)를 통해 학습한 내용을 정리합니다.
스터디 진행 시, Manifests를 사용하여 Calico를 설치하였으나,
Operator를 사용하여 설치하는 방법을 정리합니다.
과제는 아니었지만, 요새 다들 Operator Framework를 사용해서 마라샹궈 볶듯이
Operator를 지지고 볶는 것 같아서 호기심에 정리해보았습니다.
참고로 Manifests를 사용하여 설치 시, 50개의 노드[1]를 초과하는 경우 Typha를 구성하여야 합니다.
Calico 설치 환경 : AWS EC2(No EKS), kubeadm[2], pod-network-cidr=172.16.0.0/16, IPIP Mode
1. Calico Routing Mode 위에 언급된 IPIP Mode를 이해하려면 Calico의 Routing Mode를 훑을 필요성이 있었습니다.</description>
    </item>
    
    <item>
      <title>Calico 및 메트릭 수집 구성</title>
      <link>https://blog.minseong.xyz/post/kans-3w-calico-overview/</link>
      <pubDate>Sun, 15 Sep 2024 18:40:22 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-3w-calico-overview/</guid>
      <description>CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)를 통해 학습한 내용을 정리합니다.
1. Calico 설치 스터디에서 AWS CF 및 Calico 설치 스크립트(Manifest)를 제공하였기에, 이 부분은 참고만 하시기 바랍니다.
CNI가 설치되지 않았기에 NotReady 상태에 있다가, Calico 설치하면 CoreDNS가 설정되며, Ready 상태로 변경된다.
Calico 설치 전
# Control Plane and worker nodes are not ready (⎈|HomeLab:default) root@k8s-m:~# kubectl get nodes NAME STATUS ROLES AGE VERSION k8s-m NotReady control-plane 32m v1.30.5 k8s-w0 NotReady &amp;lt;none&amp;gt; 31m v1.</description>
    </item>
    
    <item>
      <title>KIND 톺아보기</title>
      <link>https://blog.minseong.xyz/post/kans-2w-kind-overview/</link>
      <pubDate>Tue, 03 Sep 2024 21:16:07 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-2w-kind-overview/</guid>
      <description>톺아보다(우리말샘) 는 의외로 표준어라고 합니다.
KIND 설치 이후에 기본적인 내용을 살펴봅니다.
CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)를 통해 학습한 내용을 정리합니다.
0. $KUBECONFIG $KUBECONFIG 환경변수가 없을 경우:
보통은 ~/.kube 디렉토리가 생성됩니다.
확인해보니, config 값과 더불어, cache 디렉토리도 확인할 수 있었습니다.
❯ find ~/.kube -maxdepth 2 -type f -exec ls -ld &amp;#34;{}&amp;#34; \; -rw------- 1 kkumtree kkumtree 44 Sep 3 21:31 /home/kkumtree/.kube/config ❯ find ~/.kube -maxdepth 2 -type d -exec ls -ld &amp;#34;{}&amp;#34; \; drwxr-x--- 3 kkumtree kkumtree 4096 Sep 3 21:31 /home/kkumtree/.</description>
    </item>
    
    <item>
      <title>리눅스에 KIND 설치하기 w/golang</title>
      <link>https://blog.minseong.xyz/post/kans-2w-kind-installation-on-linux/</link>
      <pubDate>Mon, 02 Sep 2024 00:33:19 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-2w-kind-installation-on-linux/</guid>
      <description>Helm 설치 추가
CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)에 참여하게 되면서 기록을 남기고 있습니다.
이번에는 kind(Kubernetes IN Docker)를 Golang을 통해 설치하면서 약간의 소?란이 있었던 부분만 다룹니다.
1. KIND란? 아래 사진으로 대체합니다. 자세한 내용은 Docs/Initial_design에서 볼수 있습니다. 2. KIND 설치하기 Docs/Quick-start를 참고합니다. Linux의 경우, 패키지 관리자 설치가 없어 바이너리, 혹은 소스로 설치해야 합니다.
아래 두 문장에 뭔가 발동하여 Go 언어로 설치를 해보기로 했습니다.
If you are a go developer you may find the go install option convenient.</description>
    </item>
    
  </channel>
</rss>
