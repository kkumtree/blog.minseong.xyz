<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kkumtree</title>
    <link>https://blog.minseong.xyz/post/</link>
    <description>Recent content in Posts on kkumtree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 02 Sep 2024 00:33:19 +0900</lastBuildDate><atom:link href="https://blog.minseong.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>리눅스에 KIND 설치하기 w/golang</title>
      <link>https://blog.minseong.xyz/post/kans-2w-kind-installation-on-linux/</link>
      <pubDate>Mon, 02 Sep 2024 00:33:19 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-2w-kind-installation-on-linux/</guid>
      <description>Helm 설치 추가
CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)에 참여하게 되면서 기록을 남기고 있습니다.
이번에는 kind(Kubernetes IN Docker)를 Golang을 통해 설치하면서 약간의 소?란이 있었던 부분만 다룹니다.
1. KIND란? 아래 사진으로 대체합니다. 자세한 내용은 Docs/Initial_design에서 볼수 있습니다. 2. KIND 설치하기 Docs/Quick-start를 참고합니다. Linux의 경우, 패키지 관리자 설치가 없어 바이너리, 혹은 소스로 설치해야 합니다.
아래 두 문장에 뭔가 발동하여 Go 언어로 설치를 해보기로 했습니다.
If you are a go developer you may find the go install option convenient.</description>
    </item>
    
    <item>
      <title>Jenkins 컨테이너에서 Host의 Docker 데몬 사용하기</title>
      <link>https://blog.minseong.xyz/post/kans-1w-container-socket/</link>
      <pubDate>Sun, 01 Sep 2024 09:02:15 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/kans-1w-container-socket/</guid>
      <description>최근 CloudNet@에서 진행하고 있는 K8s Advanced Network Study(이하, KANS)에 참여하게 되었습니다.
난이도를 생각하면 KH(Hardcore)NS가 더 맞아보이지만&amp;hellip;
k8s가 워낙 인기가 많기도 하지만, Pod 간 통신에는 많은 지식이 투여되기에 이번 기회에 살펴보기로 했습니다.
첫 주차는, 바로 Kubernetes에 진입하지 않고 Containerization에 대한 이해를 먼저 다뤄주셨습니다.
여타 쿠버네티스 강의와 달리 9주 간 매주 일요일에만 진행되는 세션인데도, 기반 기술을 다시 짚어주셔서 감사했습니다.
1. AWS EC2 Instance 셋업 CloudFormation을 통해, EC2 및 제반사항을 구성하여 주셨습니다만, 취미 삼아 Terraform 변환 작업을 해보았습니다.</description>
    </item>
    
    <item>
      <title>Blog maintanence in 2024</title>
      <link>https://blog.minseong.xyz/post/maintanence-in-2024/</link>
      <pubDate>Mon, 26 Aug 2024 00:02:49 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/maintanence-in-2024/</guid>
      <description>Before starting group study, I decided to update my blog.
Very small things, but I have some needs about it.
One is GitHub Actions&amp;rsquo; dependency update and another is Licences.
Cause, Blog is deployed via Github Actions, I need to check dependencies in Github Actions&amp;rsquo; workflow.
What I use is actions/checkout, actions/setup-go, and actions/setup-node.
Name Prev. Version Latest Version Purpose checkout actions/checkoutv3 actions/checkoutv4 Src. and Dest. Branch setup-go actions/setup-go@v4 actions/setup-go@v5 Hugo setup-node actions/setup-node@v3 actions/setup-node@v4 Vanila Framework commit 5d4c9b9 Another thing is Licences.</description>
    </item>
    
    <item>
      <title>그림으로 배우는 구글 클라우드 101 리뷰</title>
      <link>https://blog.minseong.xyz/post/visualizing-google-cloud-101-book-review/</link>
      <pubDate>Tue, 21 Nov 2023 13:51:29 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/visualizing-google-cloud-101-book-review/</guid>
      <description>Jpub에서 최근 출판한 그림으로 배우는 구글 클라우드 101 - 제이펍 홈페이지에 대해,
짧막하게 소개하는 글입니다.
《그림으로 배우는 구글 클라우드 101》 서평단으로 본 도서를 제공받아 작성하였습니다. 최근 AWS 프로젝트를 진행하고 있습니다. Terraform을 활용하여, IaC 기반의 인프라 구성을 하고 있는데요.
작년부터 DR(DR, Disaster Recovery)이 급격하게 화두가 되면서,
Multi-AZ, Multi-Region을 넘어 Multi-Cloud도 고려의 대상이 되는 것 같습니다.
관심이 있는지라 이번 프로젝트가 끝나면, AWS 외에도 GCP같은 다양한 CSP를 다시금 다뤄보고 싶다는 생각이 들었습니다.
물론 GCP를 주력으로 쓰고 있다면 이야기가 다르겠지만,</description>
    </item>
    
    <item>
      <title>TFC(Terraform Cloud) drift 알림 설정</title>
      <link>https://blog.minseong.xyz/post/notification-about-terraform-cloud-drift/</link>
      <pubDate>Sun, 15 Oct 2023 00:10:33 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/notification-about-terraform-cloud-drift/</guid>
      <description>CloudNet@에서의 Terraform 스터디가 끝나고 나서,
테라폼을 실제 운영 상황에 도입하면서 마주할 수 밖에 없는 드리프트(drift) 상황에 대해
이해해보는 시간을 가졌습니다.
참고) TFC에서의 Drift Detection 기능은 현재 TFC Plus 에디션에서 지원됩니다. 1. 용어 이해해보기 사실은 작년부터 테라폼을 접하고나서, IaC라는 개념에 꽂히기만 했지
운영 입장에서 마주했었던 수많은 시행착오들을 흔한 유저에러로만 생각해왔었습니다.
스터디에 참여하면서 종종 &amp;lsquo;드리프트&amp;rsquo;라는 단어를 듣고, 찾아보니
상당부분이 이에 속하는 상황이라는 것을 알 수 있었습니다.
(1) Drift? 글 작성을 위해 찾아본 기술적 Drift는 본래 주행에 있어서의 그것과</description>
    </item>
    
    <item>
      <title>Understanding terraform module</title>
      <link>https://blog.minseong.xyz/post/architecting-aws-with-terraform-module/</link>
      <pubDate>Wed, 04 Oct 2023 11:24:13 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/architecting-aws-with-terraform-module/</guid>
      <description>This week is last week of CloudNet@ group study about terraform.
In this study, my personal goal is making AWS architecture only with terraform and one tfstate file.
Basic knowledge about AWS resources is required. 1. Terraform without Module Before, I already met terraform for maintaining AWS in production level.
But at that time, our team maintain them as folder structure which is used by terraformer
# example structure $ tree .</description>
    </item>
    
    <item>
      <title>Troubleshoot when using terraformer with tfenv</title>
      <link>https://blog.minseong.xyz/post/troubleshoot-terraformer-with-tfenv/</link>
      <pubDate>Sun, 24 Sep 2023 11:47:51 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/troubleshoot-terraformer-with-tfenv/</guid>
      <description>Removing &amp;amp; installing packages are some annoying, isn&amp;rsquo;t it? So, I like using version managers like SDKMAN, nvm, etc..
I also use tfenv for terraform version management.
(prev post: KR/&amp;lsquo;Terraform 시작하기 w/Minimal Ubuntu&amp;rsquo;)
And I recommend neighbors to use terraformer for first learning about terraform.
terraformer is a great terraform generator tool for converting existing cloud infrastructure to terraform code.
In this post, I write how I use terraformer with tfenv.</description>
    </item>
    
    <item>
      <title>IAM STS를 이용한 Terraform Cloud 권한 부여</title>
      <link>https://blog.minseong.xyz/post/terraform-cloud-with-iam-sts/</link>
      <pubDate>Wed, 13 Sep 2023 20:54:28 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/terraform-cloud-with-iam-sts/</guid>
      <description>이번에는 Terraform Cloud가 얼마나 좋은지 더 알아보기 위해,
스터디에서 지속적으로 장점이 강조되어 왔던 Terraform Cloud에
IAM STS를 이용한 권한 부여 도전 및 적용 성공에 대해 써보려고 합니다.
Terraform의 상태 저장을 위해 보통 AWS S3를 사용하는데,
알다시피 S3 기록은 무료지만, 불러오는 것은 유료입니다.
(전기는 국산이지만, 원료는 수입입니다)
그래서 스터디용으로는 Terraform을 불러올 때마다,
상태 값을 S3말고, 로컬에 저장했었는데요.
밖에서는 노트북, 집에서는 데스크탑으로 하려니
이걸 GitHub의 Private Repo에 저장할까? 하다가
Terraform Cloud를 써보기로 했습니다.</description>
    </item>
    
    <item>
      <title>Terraform resource 이해하기 w/AWS VPC</title>
      <link>https://blog.minseong.xyz/post/terraform-basic-resource-concept/</link>
      <pubDate>Fri, 08 Sep 2023 22:41:14 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/terraform-basic-resource-concept/</guid>
      <description>이번에는 CloudNet@를 통해 학습한 내용을 기반으로,
AZ를 대상으로 한 data 조회 AWS VPC 생성 예제로 살펴보는 output resource 이름 변경 순으로 알아보도록 하겠습니다.
교재로 사용한 [테라폼으로 시작하는 IaC] 도 참고하였습니다.
기본 설정 aws-cli에 리전을 ap-northeast-2을 설정하였습니다. $ aws configure list Name Value Type Location ---- ----- ---- -------- profile &amp;lt;not set&amp;gt; None None access_key ****************2U5J shared-credentials-file secret_key ****************Z0co shared-credentials-file region ap-northeast-2 config-file ~/.aws/config 1. data 조회 data는 사용자가 정의하는 resource 및 리소스에 대한 스펙과 반대로,</description>
    </item>
    
    <item>
      <title>Terraform 시작하기 w/Minimal Ubuntu</title>
      <link>https://blog.minseong.xyz/post/terraform-hello-world-tfenv/</link>
      <pubDate>Thu, 31 Aug 2023 22:21:08 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/terraform-hello-world-tfenv/</guid>
      <description>이번에는 CloudNet@에서 진행하는 Terraform 스터디(이하, T101)에 참여했습니다.
Terraform을 쓰면 왜 좋은지는 자세하고 전문적인 글이 있으므로, 참고하시면 좋을 것 같습니다. (링크: 44bits)
예전에 테라폼을 썼던 적이 있지만, Module화가 어렵기도 하고
이번 기회에 테라폼 신간을 다시 복기하는 마음으로 참여했습니다.
사용한 교재는 [테라폼으로 시작하는 IaC] 입니다.
이번에는 Terraform 초기 셋업에 대해, 살펴보고
시험삼아 Canonical 공식 Minimal Ubuntu(ARM64) AMI를 설치해보겠습니다.
Terraform 설치 tfenv 사용과 .tf 작성 따라하기 Hello World in terraform Terraform 써보기 순으로 진행합니다.</description>
    </item>
    
    <item>
      <title>Init Calico from quay registry</title>
      <link>https://blog.minseong.xyz/post/init-calico-from-quay-registry/</link>
      <pubDate>Tue, 25 Jul 2023 00:40:14 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/init-calico-from-quay-registry/</guid>
      <description>Written in 25 July 2023. It could be different when you read this article. Error I met I met error message like Init:ImagePullBackOff when I tried to create calico pod.
kubectl get pods --all-namespaces NAMESPACE NAME READY STATUS RESTARTS AGE kube-system calico-kube-controllers-xxxxxxxxxx-yyyyy 1/1 Running 1 13h kube-system calico-node-xxxxx 0/1 Init:ImagePullBackOff 0 13h Why it happened Yes, it&amp;rsquo;s because of changed docker hub policy. Recently, I&amp;rsquo;m in an environment that about 20~30 people use 4 public IP addresses.</description>
    </item>
    
    <item>
      <title>Windows에서 여러 Github 토큰 관리</title>
      <link>https://blog.minseong.xyz/post/how-to-manage-github-tokens-in-local-windows/</link>
      <pubDate>Tue, 04 Jul 2023 09:57:14 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/how-to-manage-github-tokens-in-local-windows/</guid>
      <description>평소에는 Git관리를 terminal을 통해서 하고,
여러 SSH키를 통해 작업을 하기에
.ssh/config를 통해 키 기반으로 관리하고 있었다.
어쩌다보니, 토큰 기반으로 그것도 윈도우에서 관리를 해보게 되어서 둘 다 생소한 접근이라 새로운 셋업을 적용해보기로 했다.
VSCode 기반으로 세팅하기에, 그대로 따라온다면 별 문제 없이 잘 적용될 것이다.
cf. classic token이라 할지라도, 큰 이슈는 없을 것으로 생각된다.
Git config의 적용범위 git config &amp;lt;parameter&amp;gt;를 통해, 설정 값을 구성할 수 있다. system &amp;gt; global &amp;gt; local 순으로 옵션이 override된다.</description>
    </item>
    
    <item>
      <title>Release file for URL is not valid yet 해결 방법</title>
      <link>https://blog.minseong.xyz/post/how-to-fix-ubuntu-release-file-is-not-valid-yet/</link>
      <pubDate>Thu, 29 Jun 2023 02:28:34 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/how-to-fix-ubuntu-release-file-is-not-valid-yet/</guid>
      <description>최근 WSL를 쓰게 되면서, 한 가지 이슈가 생겼다.
APT repo를 업데이트 하면 아래와 같은 에러가 발생한다.
이것저것 손대보고 해결법을 적어보고자 한다.
E: Release file for http://ports.ubuntu.com/ubuntu-ports/dists/jammy/InRelease is not valid yet (invalid for another 5min 1s). Updates for this repository will not be applied. 오류 증상은 릴리스 파일이 존재하지 않는데, 5분 1초동안 유효하지 않는다고 한다.
무슨 말인가 싶은데, 5분 있다가 업데이트 해보라는 것이다.
원인 오랫동안 절전모드로 두어서 시간 동기화가 안된 것으로 보인다.</description>
    </item>
    
    <item>
      <title>Linux Runlevel - 런레벨/부트레벨</title>
      <link>https://blog.minseong.xyz/post/runlevel-in-linux/</link>
      <pubDate>Thu, 22 Jun 2023 16:07:05 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/runlevel-in-linux/</guid>
      <description>CPU를 1600X에서 5700X로 업그레이드를 진행하기에 앞서,
RunLevel(런레벨/부트레벨)에 대해 한번 메모하고자 함.
Runlevel 7가지 레벨이 존재
man runlevel 참고 Level 5을 제외하고는, cli 환경에서만 구동
Linux Standard Base 기준
ls -l /lib/systemd/system/runlevel?.target 명령어로 확인 가능 RunLevel EN 설명 비고 0 Power Off 시스템 종료(중단/Halt) 1 Rescue 시스템 복구 단일 사용자 모드 2 Multi-User 다중 사용자(텍스트 모드, 네트워크 서비스 X) 사용 X (사용자 정의 가능) 3 Multi-User 다중 사용자(텍스트 모드) 4 Multi-User 상동 사용 X (사용자 정의 가능) 5 Graphical 다중 사용자 모드 (그래픽 모드) X-window 기반 6 Reboot 시스템 리부팅 운영체제(Ubuntu 22.</description>
    </item>
    
    <item>
      <title>Vagrant 설치 및 Provider 지정</title>
      <link>https://blog.minseong.xyz/post/vagrant-init-setup-with-docker/</link>
      <pubDate>Mon, 19 Jun 2023 11:12:47 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/vagrant-init-setup-with-docker/</guid>
      <description>Ubuntu 23.04 (Host OS)에서 간단하게 Vagrant 사용을 해보고, VBox가 아닌 Docker를 Provider로 지정하여 사용해본다.
WSL2 환경에서는 Vagrant가 의도한대로 작동하지 않으므로 유의: 별도의 설정 필요 Hashicorp Docs Vagrant 설치 Ubuntu 22.04 LTS 및 23.10 기준, APT repo를 통한 설치 지원 sudo apt-get install vagrant VBox 설치(사용 시) CPU 가상화 기술 활성화 필요(BIOS단, AMD의 경우는 SVM, Intel의 경우는 VT-x) virtualbox-ext-pack(선택): USB 2.0/3.0 지원 등의 확장 기능을 사용하려면 설치 개인용도의 제한적 라이선스(동의를 위한 대화창 확인) 확장기능을 쓸 필요가 없기 때문에 설치하지 아니함 sudo apt-get install virtualbox # sudo apt-get install virtualbox-ext-pack Docker 설치(사용 시) Ubuntu 기준, 아래 3가지 설치 방법이 있으므로, 친숙한 모드로 진행 sudo snap install docker # 최신버전 sudo apt-get install docker.</description>
    </item>
    
    <item>
      <title>AWS EKS 스터디 7주차 - Automation</title>
      <link>https://blog.minseong.xyz/post/aws-eks-study-week7/</link>
      <pubDate>Sat, 10 Jun 2023 15:13:19 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/aws-eks-study-week7/</guid>
      <description>EKS 스터디도 마지막 7주차를 맞이했습니다.
이번에는 AWS Controller for k8s(ACK)와 flux를 가볍게 실습해보고
자동화에 대해 맛보기를 해보았습니다.
앞서 학습해본 IRSA 개념 외에도 CRD(CustomResourceDefinition)을 활용합니다.
1. 실습환경 배포 실습을 위한 YAML파일이 변경된거 말고는 6주차와 유사합니다.
curl -O https://s3.ap-northeast-2.amazonaws.com/cloudformation.cloudneta.net/K8S/eks-oneclick6.yaml # 이하 중략 # CERT_ARN(ACM)의 경우에는 /etc/profile에 환경변수 저장을 안해둬서 # 세션이 만료되면, 다시 재설정 필요 CERT_ARN=`aws acm list-certificates --query &amp;#39;CertificateSummaryList[].CertificateArn[]&amp;#39; --output text` echo $CERT_ARN 2. ACK(AWS Controller for k8s) 웹콘솔에 접근하지 않고도, AWS 서비스 리소스를 직접 k8s에서 정의 및 사용가능 순서: ACK 컨트롤러 설치 -&amp;gt; IRSA 설정 -&amp;gt; AWS 리소스 컨트롤 같은 패턴으로 이루어져있는데, Cloudformation을 쓰다보니 중간중간 대기 시간 발생 (23/05/29) GA: 17개 서비스, Preview: 10개 서비스 2-1.</description>
    </item>
    
    <item>
      <title>gh-pages에 댓글 기능 추가하기(giscus/Hugo)</title>
      <link>https://blog.minseong.xyz/post/how-to-add-comment-section-in-gh-pages/</link>
      <pubDate>Sun, 04 Jun 2023 09:15:14 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/how-to-add-comment-section-in-gh-pages/</guid>
      <description>요약 앞으로 가감없는 피드백 환영합니다. https://github.com/kkumtree/blog.minseong.xyz/commit/e17822e72e8d357dcdbda1025c5372161a7b93ff
배경 gh-pages로 블로그를 구축해서, 첫 게시물을 올린 지 만 4개월이 지났다.
구축기는 나중에 올려야지.
급히 벤치마킹해서 올린거라, 부족한 점은 많지만 가장 중요한 댓글 기능이 없어서 아쉬웠다.
원래는 댓글을 달지 않으려고 했는데,
부족한 부분에 대해서 조언도 받아보고 싶고 추가로 궁금한 점이나 이해가 안되는 부분에 대해서 피드백도 받고 싶었다. 다른 블로그에서 답을 찾으려고 검색엔진을 돌리면, 뭔가 2% 부족하거나 / 내가 원하는 해답이 아니거나 / 매번 이모티콘으로 끝나는 특유의 허탈감으로 짜증이 밀려와서 번역기 돌려가며 국외 포스트나 문서를 보다보니, 반대로 내 글도 큰 도움이 되지 못할 경우도 있겠다 싶었다.</description>
    </item>
    
    <item>
      <title>AWS EKS 스터디 6주차 - Security</title>
      <link>https://blog.minseong.xyz/post/aws-eks-study-week6/</link>
      <pubDate>Sun, 04 Jun 2023 06:56:52 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/aws-eks-study-week6/</guid>
      <description>이번에는 보안을 위한 인증 및 인가, 그리고 IRSA를 중심으로 EKS의 보안에 대해 학습해보았습니다.
kops 스터디 때에는 잘 몰랐는데, RBAC 뿐만 아니라 복기하다보니&amp;hellip;
[4-1] projected Volume [4-2] AWS Load Balancer Controller IRSA 및 LB Pod mutating 위의 두 가지가 중요한 파트를 차지하고 있었음을 알 수 있었습니다.
Network(2주차)가 매번 뭔가 일부가 아리송하였다면
Security는 복기하다가 이론적으로는 간단(과연?)해보여도
실제 구동방식 이해 자체가 초반에 안되서, 사흘 남짓 걸린 덕에 더 어려웠던 것 같습니다.
그 외 myeks-bastion-2에 접속 시, 함께 진행할 때는 ssh {Public IP}로 잘 접속되는 걸 봤는데 정작 혼자 할 땐 접속이 되지않았습니다.</description>
    </item>
    
    <item>
      <title>GnuPG 키 백업하기</title>
      <link>https://blog.minseong.xyz/post/how-to-backup-gpg-key-to-personal-media/</link>
      <pubDate>Sat, 27 May 2023 18:29:18 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/how-to-backup-gpg-key-to-personal-media/</guid>
      <description>23/05/30 GPG 키 복원방법 및 출처 추가 망가진 PC 메인보드를 교체하고, 서둘러 GPG key를 백업하였습니다.
용량이 그리 큰편은 아니니, 왠만한 USB 메모리에도 충분히 백업이 가능합니다.
(어째서 안했었을꼬&amp;hellip;)
출처는 마지막 referenece를 참조해주시기 바랍니다.
1. Backup # tree로 ~/.gnupg 확인 tree ~/.gnupg # 현재 사용중인 키 확인 gpg --list-secret-keys --keyid-format LONG # 키 백업 ## public 키 백업 gpg --export --export-options backup --output ~/public_mscho.gpg ## private 키 백업 (암호 입력 필요) gpg --export-secret-keys --export-options backup --output ~/private_mscho.</description>
    </item>
    
    <item>
      <title>AWS EKS 스터디 5주차 - Autoscaling</title>
      <link>https://blog.minseong.xyz/post/aws-eks-study-week5/</link>
      <pubDate>Mon, 22 May 2023 19:23:37 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/aws-eks-study-week5/</guid>
      <description>이번 주차는 오토스케일링을 메인으로 하여, 수평/수직 프로비저닝을 학습해보았습니다.
마지막에는 고성능 오토스케일러인 Karpenter를 별도로 실습해보았습니다. 특히..
HPA custom metrics(사용자 정의 메트릭) 적용
YAML 설정값을 CPU로 맞춘 것을 잊고, 프로비저닝을 잘못 예측한 것도 함께 공유합니다.
AutoScaling
HPA: Horizontal Pod Autoscaler VPA: Vertical Pod Autoscaler CA: Cluster Autoscaler 각 CSP 의존적, 워커 노드 레벨에서의 오토스케일링 1. 실습 환경 배포 4주차의 초기 배포 내용에 p8s 및 Grafana를 추가하여 배포 verticalPodAutoscaler 활성화 추천 대시보드: 15757, 17900, 15172 curl -O https://s3.</description>
    </item>
    
    <item>
      <title>AWS EKS 스터디 4주차 - Observability</title>
      <link>https://blog.minseong.xyz/post/aws-eks-study-week4/</link>
      <pubDate>Sun, 21 May 2023 06:13:52 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/aws-eks-study-week4/</guid>
      <description>이번 주차에는 Observability에 대해 스터디가 진행되었습니다.
자원 모니터링 툴들의 적용 및 사용이 중심입니다.
그나저나 k8s 1.26에서 metrics의 일부 명칭이 바뀌는 걸 보고 식겁했습니다.
(etcd_db_total_size_bytes 대신, apiserver_storage_db_total_size_in_bytes 으로 변경)
또한 kubecost의 경우, cloudformation 스택 제거 후에도 볼륨 데이터가 남아있어서 별도로 삭제해야 했습니다.
1. 실습환경 배포 NAT게이트웨이, EBS addon, IAM role, ISRA for LB/EFS, PreCommand 포함 노드: t3.xlarge t3a.xlarge(AMD)는 서울 리전 b AZ(ap-northeast-2b)에서 미지원 더 많은 값들이 입력되어서, 생성 완료까지 더 많은 시간이 소요 (약 20여분 이내) curl -O https://s3.</description>
    </item>
    
    <item>
      <title>aws-cli를 이용한 bastion CIDR 변경</title>
      <link>https://blog.minseong.xyz/post/modify-bastion-cidr-with-aws-cli/</link>
      <pubDate>Thu, 18 May 2023 21:36:19 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/modify-bastion-cidr-with-aws-cli/</guid>
      <description>0. 요약 Docs 1 Docs 2 aws ec2 describe-security-groups aws ec2 modify-security-group-rules 1. 배경 2주 전에 문득 이런 질문을 올렸던 적이 있었다.
물론 바꾸면 안될 일은 없었는데 이렇게 하는게 맞나 확신이 모자라서 의견을 여쭤봤었고,
이게 맞다는 확신을 받았다.
그리고 오늘&amp;hellip; 카페를 두 곳이나 들리면서 하느라 약간의 번거로움도 있고 AWS 웹 콘솔에서 하려 했다.
그런데, 유독 SG에서만 페이지 로딩이 timeout 걸려서,
도저히 수정은 커녕 해당 ID도 파악을 하기 힘든 상황이 되었다.</description>
    </item>
    
    <item>
      <title>AWS EKS 스터디 3주차 - Storage</title>
      <link>https://blog.minseong.xyz/post/aws-eks-study-week3/</link>
      <pubDate>Fri, 12 May 2023 05:36:38 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/aws-eks-study-week3/</guid>
      <description>이번 주차에는 스토리지에 대해 실습을 진행해보았습니다. 지난번 kOps 스터디에서 다루었던 내용이지만, 부족했던 내용을 보충하면서 작성을 해보았습니다.
주요한 내용은&amp;hellip;
NodeAffinity를 이용한 라벨링 AWS EBS controller의 경우, AWS managed policy를 활용 AWS Volume SnapShots Controller를 통한 볼륨 백업 AWS EFS controller에서의 동적 프로비저닝 AWS EKS 신규 노드그룹 생성 별도로 kube-ops-view의 경우, 웹으로 확인할 수 있을 때까지 시간이 소요된다는 점이 있습니다.
1. 실습 환경 배포 2주차에 실습했던 내용들을 미리 배포 AWS LB ExternalDNS kube-ops-view context 이름 변경 지난 번까지 pkos가 뜨는 현상이 있었는데, 닉네임을 별도 지정할 수 있음 EFS 생성 관련 cloudformation이 추가되었음 EFS FS ID 조회를 하기 위해 aws-cli 필터 활용 (출처: AWS Docs) # 실습 YAML 파일 curl -O https://s3.</description>
    </item>
    
    <item>
      <title>AWS EKS 스터디 2주차 - Network</title>
      <link>https://blog.minseong.xyz/post/aws-eks-study-week2/</link>
      <pubDate>Sun, 07 May 2023 07:30:52 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/aws-eks-study-week2/</guid>
      <description># 아쉽게도 신규 항목인 istio, kube-ops-view는 실습 실패 - istio: `myhome.yaml` 을 어떻게 생성할지 몰라서 중단 - kube-ops-view: A레코드에 제대로 잡히지 않음 지난 1주차에 이어, 이번 주에는 EKS의 네트워크 구성에 대해 알아보는 시간이었습니다.
직전 스터디에서도 바로 광탈당하나?하며 밤과 주말을 하얗게 불태웠을 정도로
가장 고난도라고 생각했던 네트워크를 다시 만나니 이제 1% 친근감이 느껴지고 있네요.
자 그럼 해보도록 합시다.
1. cloudformation을 활용한 EKS 원클릭 구성 학습을 위해, 이번에도 가시다님이 준비해주신 원클릭 배포 yaml을 활용하여 배포.</description>
    </item>
    
    <item>
      <title>AWS EKS 스터디 1주차</title>
      <link>https://blog.minseong.xyz/post/aws-eks-study-week1/</link>
      <pubDate>Sun, 30 Apr 2023 03:00:15 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/aws-eks-study-week1/</guid>
      <description>최근 CloudNet@에서 진행하고 있는
AWS EKS Workshop Study(이하, AEWS)에 참여하게 되었습니다.
k8s가 워낙 인기가 많기도 하지만, 지난 kOps 스터디를 통해 관리요소가 참 많은 것을 느꼈었고,
좀더 수월하게 이해를 해보고자 AWS 서비스인
EKS(Elastic Kubernetes Service)를 이번 기회에 살펴보기로 했습니다.
EKS 사용에 있어 고려사항 EKS는 관리형 서비스(managed service)이기에 아래와 같은 장점이 있습니다.
클러스터링을 위한 Control Plane(일명, 마스터 노드)을 AWS에서 관리해줍니다. 워커노드는 사용자가 AMI를 구성하여 이를 사용 AWS에서 제공하는 Fargate로 VM을 할당하여 사용 kOps와도 유사하지만, 다른 AWS 서비스와의 연동이 용이합니다.</description>
    </item>
    
    <item>
      <title>GitHub Pages가 고장났나? (Cloudflare 526 Error)</title>
      <link>https://blog.minseong.xyz/post/fix-error-526-in-cloudflare-with-github-page/</link>
      <pubDate>Tue, 28 Mar 2023 18:29:11 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/fix-error-526-in-cloudflare-with-github-page/</guid>
      <description>`gh-pages &amp;amp; Cloudflare DNS` 를 쓰고자 한다면, Cloudflare에서 SSL/TLS 정책을 `Full (Strict)` 대신 `Full`로 하는 쪽이 관리 요소를 줄일 수 있다. Invalid SSL certificate 그간 업무 인계도 있었고, 개인 일정을 소화하면서 블로그 들어갈 일이 없었다.
그러다 지난 주말에 있었던 정기총회에서 만난 분으로부터
블로그에 안 들어가진다는 말을 듣고, 그제서야 인지하게 되었다.
대체 언제부터 이랬던걸까?
GitHub Pages에서 블로그 관리를 하고있었고,
Cloudflare로 Domain Registrar를 이전한 후에
블로그를 올렸기 때문에 한동안 신경을 안 써도 잘 썼는데.</description>
    </item>
    
    <item>
      <title>Ubuntu Pro를 적용하고 사용해보기</title>
      <link>https://blog.minseong.xyz/post/how-to-apply-ubuntu-pro/</link>
      <pubDate>Fri, 17 Mar 2023 11:14:50 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/how-to-apply-ubuntu-pro/</guid>
      <description>튜토리얼 레벨의 게시물입니다. 모든 정보는 https://ubuntu.com/pro/tutorial 에 기초합니다. 기타 초기 구성 중 이슈는 아래도 참고하시기 바랍니다. https://canonical-ubuntu-pro-client.readthedocs-hosted.com/en/latest/index.html 계기 필자가 개인 데스크탑으로 사용하는 Ubuntu 버전이 22.10 (Kinetic Kudu), 23.04 (Lunar Lobster) 이기에, Ubuntu Pro를 적용해볼 기회가 없었다.
이번에 지인 분으로부터 제공받은 엑세스랩(XSLAB)사의 ARM 기반 Vraptor SQ nano를
클린설치하고 나니 Ubuntu 20.04.6 LTS (Focal Fossa) 버전이었기에, Ubuntu Pro를 적용해보기로 했다.
해당 제품은 보라몰/voramall에서도 만나볼 수 있다.
Ubuntu Pro란? Ubuntu Pro는 Ubuntu의 구독 상품으로, 보안 등의 지원 기능을 추가한 서비스로 사전에 보안 취약점을 빠르게 보완해서 데이터를 보호하는게 여러모로 절감되지 않을 까 싶기에 인상 깊었던 프로덕트였다.</description>
    </item>
    
    <item>
      <title>Node.js를 위한 Dockerfile 만들기</title>
      <link>https://blog.minseong.xyz/post/making-dockerfile-for-node/</link>
      <pubDate>Wed, 08 Mar 2023 20:43:43 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/making-dockerfile-for-node/</guid>
      <description>새로 구축한 Dockerfile FROM public.ecr.aws/lts/ubuntu:22.04_stable ENV DEBIAN_FRONTEND=noninteractive # Set Preferred Variables ARG TZ=Asia/Seoul \ NODE_VER=18.x \ UBUNTU_DIST=jammy \ NPM_PKGS=&amp;#34;cross-env pm2&amp;#34; \ ADD_USG=kkumtree \ ADD_USR=kkumtree \ ADD_USR_LANG=C.UTF-8 ARG NODE_REPO=node_${NODE_VER} # Apply essentials RUN set -ex \ &amp;amp;&amp;amp; ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime \ &amp;amp;&amp;amp; apt-get update -y &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 \ &amp;amp;&amp;amp; apt-get install -y --no-install-recommends apt-utils &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 \ &amp;amp;&amp;amp; apt-get install -y --no-install-recommends \ tzdata \ wget curl \ ca-certificates openssl \ lsb-release gnupg \ gcc g++ make \ zip unzip \ vim \ git \ &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 \ &amp;amp;&amp;amp; echo date # Install env for runtime # nodejs RUN set -ex \ &amp;amp;&amp;amp; curl -sLf -o /dev/null \ &amp;#34;https://deb.</description>
    </item>
    
    <item>
      <title>kops로 손쉽게 spot instance 요청하기</title>
      <link>https://blog.minseong.xyz/post/how-to-request-spot-with-kops/</link>
      <pubDate>Mon, 06 Mar 2023 18:43:51 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/how-to-request-spot-with-kops/</guid>
      <description>kops로 충분히 spot instance를 굴릴 수 있지 않을까? 란 생각을 pkos 스터디 내내 하고 있었습니다만,
이미 t3.small 돌렸다가 제대로 노드들이 작동하지도 않았음을 맛봤기 때문에&amp;hellip;
우선순위는 주차별 과제 제출이었기 때문에 이제야 시범 테스트를 해보고, 글을 작성해봅니다. 요약하자면 복습용으로는 충분히 가능하다. 라는 판단입니다. 참고로, 손쉽게 === 야매 의 느낌으로 기술해보았습니다. 글 읽기 귀찮다! 싶으면 여기에서 원글을 확인하실 수 있습니다. 왜 스팟 인스턴스인가? 이미 이전 포스팅의 서두에서 언급한 바 있으나,
아무리 클라우드 서비스가 합리적이어도 On-demand 인스턴스를 학습용으로 사용하기엔 살짝 비효율적이라는 생각이 들었습니다.</description>
    </item>
    
    <item>
      <title>AWS 트러블 슈팅 - 7주 간의 k8s 실무 스터디를 마치며</title>
      <link>https://blog.minseong.xyz/post/basic-aws-troubleshooting/</link>
      <pubDate>Sat, 25 Feb 2023 22:07:23 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/basic-aws-troubleshooting/</guid>
      <description>최근 CloudNet@에서 진행하고 있는 Production Kubernetes Online Study(이하, PKOS)도 마지막 주차가 끝났습니다.
남은 계획은 4월부터 시작되는 휴식기간(a.k.a. 계약만료 후)중 복습 겸, 포스팅을 해보는 것입니다.
오늘은 아래와 같이 실패를 거듭하여 추가로 알게된 소소한 트러블슈팅을 정리해보려고 합니다.
(물론, 새벽에 겨우겨우 주차별 과제 제출하고 기절하는 바람에, 맛점하다 깨닫고 소스라치게 휴대폰으로 수동 삭제한게 비용의 주 요인이긴 하네요;)
불필요한 Try &amp;amp; Fail을 줄이고, 즐거운 k8s 학습되시기 바랍니다.
1. AWS 계정 잠금 해제 상황 처음 1주차 안내가 끝나고 Route53 Hostname을 구매하려고 하니, 자꾸 결제가 실패하는 문제가 발생했습니다.</description>
    </item>
    
    <item>
      <title>Traefik을 활용한 minikube 예제 구현시도 w/Apple Silicon</title>
      <link>https://blog.minseong.xyz/post/traefik-with-minikube-in-m1/</link>
      <pubDate>Sun, 05 Feb 2023 04:54:06 +0900</pubDate>
      
      <guid>https://blog.minseong.xyz/post/traefik-with-minikube-in-m1/</guid>
      <description>주변으로부터 피드백을 받은 내용이 있어 새로운 글로 보완예정입니다. - colima는 containerd처럼 cri가 아닌, Docker engine과 containerd 사이의 물건으로 추정됩니다. - 도커 엔진은 현재 containerd를 통해 프로세스를 관리. - colima도 docker shim 구조는 탈피했을 거라고 추측 중. - 도커 엔진과 containerd 사이의 컨테이너 엔진(관리도구?)로 보임 - colima 시작 시, 특정 런타임을 선택할 수 있습니다. 문서를 잘 읽어봅시다. `colima start --runtime containerd` - k8s를 위한 colima 시작 명령어는 별도로 있습니다. colima github를 참고해주세요.</description>
    </item>
    
  </channel>
</rss>
